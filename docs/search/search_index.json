{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"tutorials/adb/","text":"adb (Android Debug Bridge) adb ist ein Kommandozeilenprogramm mit dem unterschiedliche Aufgaben auf einem verkn\u00fcpften Android Ger\u00e4t ausgef\u00fchrt werden k\u00f6nnen. Am verkn\u00fcpfen Android Ger\u00e4t l\u00e4uft ein Dienst (Daemon) adbd , welcher \u00fcber das Kommandozeilenprogramm adb auf dem Entwicklungsrechner angesprochen werden kann. Mit der Installation von Android Studio wird adb am Entwicklungsrechner installiert und kann \u00fcber die Kommandozeile genutzt werden. Beispiele Verkn\u00fcpfte Ger\u00e4te auflisten > adb devices Daten auf das Ger\u00e4t laden (push) > adb push C:\\lokale-datei.txt /sdcard/pushedfile.txt Daten vom Ger\u00e4t herunterladen (pull) > adb pull /sdcard/remotefile.txt C:\\lokale-remote-datei.txt Shell \u00dcber adb kann man sich auf die Linux-Shell des Android-Ger\u00e4ts einloggen. > adb shell Impliziten Intent starten > adb shell > am start -a android.intent.action.SENDTO -d sms:+43234235235 -e sms_body \"hello world\" Screenshot machen und herunterladen > adb shell > screencap /sdcard/screenshot.png > exit > adb pull /sdcard/screenshot.png ./screenshot.png","title":"adb"},{"location":"tutorials/adb/#adb-android-debug-bridge","text":"adb ist ein Kommandozeilenprogramm mit dem unterschiedliche Aufgaben auf einem verkn\u00fcpften Android Ger\u00e4t ausgef\u00fchrt werden k\u00f6nnen. Am verkn\u00fcpfen Android Ger\u00e4t l\u00e4uft ein Dienst (Daemon) adbd , welcher \u00fcber das Kommandozeilenprogramm adb auf dem Entwicklungsrechner angesprochen werden kann. Mit der Installation von Android Studio wird adb am Entwicklungsrechner installiert und kann \u00fcber die Kommandozeile genutzt werden.","title":"adb (Android Debug Bridge)"},{"location":"tutorials/adb/#beispiele","text":"","title":"Beispiele"},{"location":"tutorials/adb/#verknupfte-gerate-auflisten","text":"> adb devices","title":"Verkn\u00fcpfte Ger\u00e4te auflisten"},{"location":"tutorials/adb/#daten-auf-das-gerat-laden-push","text":"> adb push C:\\lokale-datei.txt /sdcard/pushedfile.txt","title":"Daten auf das Ger\u00e4t laden (push)"},{"location":"tutorials/adb/#daten-vom-gerat-herunterladen-pull","text":"> adb pull /sdcard/remotefile.txt C:\\lokale-remote-datei.txt","title":"Daten vom Ger\u00e4t herunterladen (pull)"},{"location":"tutorials/adb/#shell","text":"\u00dcber adb kann man sich auf die Linux-Shell des Android-Ger\u00e4ts einloggen. > adb shell","title":"Shell"},{"location":"tutorials/adb/#impliziten-intent-starten","text":"> adb shell > am start -a android.intent.action.SENDTO -d sms:+43234235235 -e sms_body \"hello world\"","title":"Impliziten Intent starten"},{"location":"tutorials/adb/#screenshot-machen-und-herunterladen","text":"> adb shell > screencap /sdcard/screenshot.png > exit > adb pull /sdcard/screenshot.png ./screenshot.png","title":"Screenshot machen und herunterladen"},{"location":"tutorials/apps-ausf%C3%BChren/","text":"Apps ausf\u00fchren Um ein App Projekt, welches \u00fcber Android Studio ge\u00f6ffnet wurde, auszuf\u00fchren bestehen generell 2 M\u00f6glichkeiten. Entweder kann das Projekt innerhalb eines Emulators ausgef\u00fchrt werden oder auf einem Android Ger\u00e4t das \u00fcber USB oder Wifi mit dem Entwicklungsrechner verkn\u00fcpft ist. Verf\u00fcgbare Ger\u00e4te werden im Dropdown neben dem Play-Button angezeigt. Nach Auswahl eines entsprechenden Ger\u00e4tes kann die App darauf gestartet werden (Klick auf den Play-Button). Emulator Der Emulator simuliert ein echtes Android Ger\u00e4t und bietet nahezu alle Funktionen, welche auch ein richtiges Android Ger\u00e4t bietet. Als System-Vorausetzung um Emulatoren zu nutzen muss Intel\u00ae HAXM installiert werden. Download von Intel\u00ae HAXM Troubleshooting Intel\u00ae HAXM Troubleshooting von Android Der Erstellung und Verwendung von Emulatoren ist grunds\u00e4tzlich sehr intuitiv und ben\u00f6tigt wenig Erkl\u00e4rung. Alle Details zu Emulatoren finden sich in der Android Dokumentation ( Emulatoren ). Android Ger\u00e4t Die Ausf\u00fchrung der App ist am Android Smartphone oft schneller und einfacher als am Emulator. Damit ein Smartphone zur Ausf\u00fchrung von Apps in Entwicklung verwendet werden kann, m\u00fcssen die Entwickleroptionen freigeschalten werden: Entwickleroptionen freischalten Dazu muss am Android Smartphone in Einstellungen > Telefoninfo nach der Buildnummer gesucht werden. Diese findet sich zB unter Einstellungen > Telefoninfo > Softwareinformationen . Es muss dann ca. 7-mal auf die Buildnummer geklickt werden, dann werden die Entwickleroptionen freigeschalten. USB-Debugging aktivieren Nachdem die Entwickleroptionen freigeschalten wurden, finden sich diese unter Einstellungen > Entwickleroptionen . Dort muss USB-Debugging aktiviert werden und das Smartphone muss \u00fcber USB-Kabel am Rechner angeschlossen sein.","title":"Apps ausf\u00fchren"},{"location":"tutorials/apps-ausf%C3%BChren/#apps-ausfuhren","text":"Um ein App Projekt, welches \u00fcber Android Studio ge\u00f6ffnet wurde, auszuf\u00fchren bestehen generell 2 M\u00f6glichkeiten. Entweder kann das Projekt innerhalb eines Emulators ausgef\u00fchrt werden oder auf einem Android Ger\u00e4t das \u00fcber USB oder Wifi mit dem Entwicklungsrechner verkn\u00fcpft ist. Verf\u00fcgbare Ger\u00e4te werden im Dropdown neben dem Play-Button angezeigt. Nach Auswahl eines entsprechenden Ger\u00e4tes kann die App darauf gestartet werden (Klick auf den Play-Button).","title":"Apps ausf\u00fchren"},{"location":"tutorials/apps-ausf%C3%BChren/#emulator","text":"Der Emulator simuliert ein echtes Android Ger\u00e4t und bietet nahezu alle Funktionen, welche auch ein richtiges Android Ger\u00e4t bietet. Als System-Vorausetzung um Emulatoren zu nutzen muss Intel\u00ae HAXM installiert werden. Download von Intel\u00ae HAXM Troubleshooting Intel\u00ae HAXM Troubleshooting von Android Der Erstellung und Verwendung von Emulatoren ist grunds\u00e4tzlich sehr intuitiv und ben\u00f6tigt wenig Erkl\u00e4rung. Alle Details zu Emulatoren finden sich in der Android Dokumentation ( Emulatoren ).","title":"Emulator"},{"location":"tutorials/apps-ausf%C3%BChren/#android-gerat","text":"Die Ausf\u00fchrung der App ist am Android Smartphone oft schneller und einfacher als am Emulator. Damit ein Smartphone zur Ausf\u00fchrung von Apps in Entwicklung verwendet werden kann, m\u00fcssen die Entwickleroptionen freigeschalten werden:","title":"Android Ger\u00e4t"},{"location":"tutorials/apps-ausf%C3%BChren/#entwickleroptionen-freischalten","text":"Dazu muss am Android Smartphone in Einstellungen > Telefoninfo nach der Buildnummer gesucht werden. Diese findet sich zB unter Einstellungen > Telefoninfo > Softwareinformationen . Es muss dann ca. 7-mal auf die Buildnummer geklickt werden, dann werden die Entwickleroptionen freigeschalten.","title":"Entwickleroptionen freischalten"},{"location":"tutorials/apps-ausf%C3%BChren/#usb-debugging-aktivieren","text":"Nachdem die Entwickleroptionen freigeschalten wurden, finden sich diese unter Einstellungen > Entwickleroptionen . Dort muss USB-Debugging aktiviert werden und das Smartphone muss \u00fcber USB-Kabel am Rechner angeschlossen sein.","title":"USB-Debugging aktivieren"},{"location":"tutorials/neues-projekt/","text":"Neues Projekt erstellen \u00dcber den Projekt-Wizard wird man durch den Erstellungsprozess eines neues Android Projektes geleitet. Neues Projekt Nachdem ersten Start von Android Studio ist die Ansicht, wie unten im Screenshot dargestellt, vorhanden. Dabei kann \u00fcber Klick auf + Start a new Android Studio project ein neues Projekt erstellt werden. Alternativ kann \u00fcber die ge\u00f6ffnete Android Studio Projektansicht \u00fcber das Men\u00fc File > New > New Project... ein neues Projekt erstellt werden. Erste Activity w\u00e4hlen Mit dem Projekt-Wizard k\u00f6nnen Android Projekte f\u00fcr die Plattformen Phone and Tablet , Wear OS , TV , Automotive und Android Things erstellt werden. Unser Fokus liegt dabei auf Phone and Tablet . Ein Android Projekt besteht normalerweise zumindest aus einer Activity. Ein gro\u00dfes Android Projekt kann durchaus \u00fcber Hundert Activities umfassen. F\u00fcr ein neues Projekt kann aus unterschiedlichen Templates f\u00fcr die erste Activity gew\u00e4hlt werden. F\u00fcr die meisten unserer Projekte w\u00e4hlen wir das Template Empty Activity . Projektkonfiguration Projektkonfiguration Im letzten Schritt des Projekt-Wizard werden wichtige Daten zum Projekt festgelegt. All diese Daten k\u00f6nnen grunds\u00e4tzlich sp\u00e4ter noch ver\u00e4ndert werden, dies ist dann aber teilweise mit aufw\u00e4ndigen Refactoring verbunden. Folgende Parameter k\u00f6nnen festgelegt werden: Name: Der Name wird an allen wichtigen Stellen im Android Betriebssystem f\u00fcr die App angezeigt (zB am All-Apps Screen oder am Recents Screen). Package name: Alle Klassen des Projektes werden mit diesem Package Name versehen. Save location: An dieser Stelle wird das Projekt am Dateisystem gespeichert. Language: Native Android Apps k\u00f6nnen grunds\u00e4tzlich in Java oder Kotlin entwickelt werden. Minimum SDK: Auswahl der SDK Version die mindestens unterst\u00fctzt werden soll (siehe unten). Minimum SDK w\u00e4hlen F\u00fcr Android wird zumindest j\u00e4hrlich eine neue Version (inkl. SDK) ver\u00f6ffentlicht. Die Auswahl h\u00e4ngt davon ab, welche \u00e4lteren Android Versionen von der App noch unterst\u00fctzt werden sollen. Im Screenshot ist ersichtlich, dass neuere Android Versionen global eine sehr geringe Verbreitung haben. Das Ziel eines Projektes sollte grunds\u00e4tzlich sein, dass ein gro\u00dfe Zahl von Benutzern die App uneingeschr\u00e4nkt benutzen k\u00f6nnen. Eine Unterst\u00fctzung von mind. 80% ist in den meisten F\u00e4llen eine gute Wahl. Projekt erstellen W\u00e4hlen Sie die Parameter um Ihr geplantes Projekt zu erstellen und klicken Sie auf Finish .","title":"Neues Projekt"},{"location":"tutorials/neues-projekt/#neues-projekt-erstellen","text":"\u00dcber den Projekt-Wizard wird man durch den Erstellungsprozess eines neues Android Projektes geleitet.","title":"Neues Projekt erstellen"},{"location":"tutorials/neues-projekt/#neues-projekt","text":"Nachdem ersten Start von Android Studio ist die Ansicht, wie unten im Screenshot dargestellt, vorhanden. Dabei kann \u00fcber Klick auf + Start a new Android Studio project ein neues Projekt erstellt werden. Alternativ kann \u00fcber die ge\u00f6ffnete Android Studio Projektansicht \u00fcber das Men\u00fc File > New > New Project... ein neues Projekt erstellt werden.","title":"Neues Projekt"},{"location":"tutorials/neues-projekt/#erste-activity-wahlen","text":"Mit dem Projekt-Wizard k\u00f6nnen Android Projekte f\u00fcr die Plattformen Phone and Tablet , Wear OS , TV , Automotive und Android Things erstellt werden. Unser Fokus liegt dabei auf Phone and Tablet . Ein Android Projekt besteht normalerweise zumindest aus einer Activity. Ein gro\u00dfes Android Projekt kann durchaus \u00fcber Hundert Activities umfassen. F\u00fcr ein neues Projekt kann aus unterschiedlichen Templates f\u00fcr die erste Activity gew\u00e4hlt werden. F\u00fcr die meisten unserer Projekte w\u00e4hlen wir das Template Empty Activity . Projektkonfiguration","title":"Erste Activity w\u00e4hlen"},{"location":"tutorials/neues-projekt/#projektkonfiguration","text":"Im letzten Schritt des Projekt-Wizard werden wichtige Daten zum Projekt festgelegt. All diese Daten k\u00f6nnen grunds\u00e4tzlich sp\u00e4ter noch ver\u00e4ndert werden, dies ist dann aber teilweise mit aufw\u00e4ndigen Refactoring verbunden. Folgende Parameter k\u00f6nnen festgelegt werden: Name: Der Name wird an allen wichtigen Stellen im Android Betriebssystem f\u00fcr die App angezeigt (zB am All-Apps Screen oder am Recents Screen). Package name: Alle Klassen des Projektes werden mit diesem Package Name versehen. Save location: An dieser Stelle wird das Projekt am Dateisystem gespeichert. Language: Native Android Apps k\u00f6nnen grunds\u00e4tzlich in Java oder Kotlin entwickelt werden. Minimum SDK: Auswahl der SDK Version die mindestens unterst\u00fctzt werden soll (siehe unten).","title":"Projektkonfiguration"},{"location":"tutorials/neues-projekt/#minimum-sdk-wahlen","text":"F\u00fcr Android wird zumindest j\u00e4hrlich eine neue Version (inkl. SDK) ver\u00f6ffentlicht. Die Auswahl h\u00e4ngt davon ab, welche \u00e4lteren Android Versionen von der App noch unterst\u00fctzt werden sollen. Im Screenshot ist ersichtlich, dass neuere Android Versionen global eine sehr geringe Verbreitung haben. Das Ziel eines Projektes sollte grunds\u00e4tzlich sein, dass ein gro\u00dfe Zahl von Benutzern die App uneingeschr\u00e4nkt benutzen k\u00f6nnen. Eine Unterst\u00fctzung von mind. 80% ist in den meisten F\u00e4llen eine gute Wahl. Projekt erstellen W\u00e4hlen Sie die Parameter um Ihr geplantes Projekt zu erstellen und klicken Sie auf Finish .","title":"Minimum SDK w\u00e4hlen"},{"location":"%C3%BCbungen/01/","text":"\u00dcbungsblatt 1 Wir haben einen dreistufigen Prozess zur Planung bzw. Visionsentwicklung von mobile Apps besprochen. Der Prozess besteht aus den 3 Schritten und f\u00fcr jeden Schritt gibt es n\u00fctzliche Werkzeuge zur Unterst\u00fctzung: Vision (Product Vision Board) User Journey (UML Use-Case Diagramm) App Screens (Prototyping on Paper) \u00dcbung 1 Machen Sie sich mit den Werkzeugen vertraut indem Sie die entsprechenden Websites bzw. Videos ansehen und ebenfalls die Werkzeuge \u00f6ffnen und erste Arbeitsschritte versuchen: Product Vision Board Website Video Template UML Use-Case Diagramm Video Werkzeug App Screens Website \u00dcbung 2 (Vision) Finden Sie sich in einer Gruppe aus 2-3 Personen zusammen und \u00fcberlegen Sie sich eine App Idee. Diese App Idee kann auch in Hinblick auf das \u00dcbungsprojekt gew\u00e4hlt werden. Letztlich sollte diese App zum Teil umgesetzt werden. Die App Idee kann aber auch nur vorl\u00e4ufig sein und muss nicht als \u00dcbungsprojekt umgesetzt werden. Bedenken hinsichtlich einer drohenden Umsetzung sollten hier keine Rolle spielen. Ebenfalls muss die Idee nicht zwingend einzigartig oder neu sein. Ein anderer Blick oder eine andere Bedinung auf ein bestehendes Problem kann auch eine relevante Innovation hervorbringen. Nutzen Sie nun das Product Vision Board um Ihre Idee zu konkretisieren und alle relevanten Aspekte zu durchdenken. F\u00fcllen Sie das Template zum Product Vision Board aus. Ideenlos Falls Sie keine Ideen haben, k\u00f6nnen Sie eine der folgenden nehmen: Open Source Version der Prototyping on Paper App Regionale Touren App f\u00fcr Mountainbikeing, E-Biking oder sonstige Sportarten Lernkarten App \u00dcbung 3 (User Journey) Nachdem die Vision entwickelt wurde, \u00fcberlegen Sie sich mit Hilfe des UML Use-Case Diagramms die User Journey durch die App. Nutzen Sie dazu das verlinkte Zeichen Werkzeug. Die \u00dcbung kann ebenfalls in der Gruppe gel\u00f6st werden. \u00dcbung 4 (App Screens) Als letzter Schritt sollten Screens der App entworfen werden. In den meisten F\u00e4llen entspricht jeder Use-Case im Diagramm (Oval im Diagramm) einem Screen. Die Screens k\u00f6nnen einfach mit Bleistift und Papier gezeichnete werden und fotografiert werden (Prototyping on Paper Workflow in der App). Sie k\u00f6nnen nat\u00fcrlich auch andere Werkzeuge verwenden, falls Ihnen das vorgeschlagene nicht zusagt. Wichtig ist nur, dass wir uns in der Prototypen Phase befinden, es geht nicht darum perfekte und sch\u00f6n gestylte Screens zu machen. Die Usability und Idee steht im Vordergrund.","title":"\u00dcbungsblatt 1"},{"location":"%C3%BCbungen/01/#ubungsblatt-1","text":"Wir haben einen dreistufigen Prozess zur Planung bzw. Visionsentwicklung von mobile Apps besprochen. Der Prozess besteht aus den 3 Schritten und f\u00fcr jeden Schritt gibt es n\u00fctzliche Werkzeuge zur Unterst\u00fctzung: Vision (Product Vision Board) User Journey (UML Use-Case Diagramm) App Screens (Prototyping on Paper)","title":"\u00dcbungsblatt 1"},{"location":"%C3%BCbungen/01/#ubung-1","text":"Machen Sie sich mit den Werkzeugen vertraut indem Sie die entsprechenden Websites bzw. Videos ansehen und ebenfalls die Werkzeuge \u00f6ffnen und erste Arbeitsschritte versuchen: Product Vision Board Website Video Template UML Use-Case Diagramm Video Werkzeug App Screens Website","title":"\u00dcbung 1"},{"location":"%C3%BCbungen/01/#ubung-2-vision","text":"Finden Sie sich in einer Gruppe aus 2-3 Personen zusammen und \u00fcberlegen Sie sich eine App Idee. Diese App Idee kann auch in Hinblick auf das \u00dcbungsprojekt gew\u00e4hlt werden. Letztlich sollte diese App zum Teil umgesetzt werden. Die App Idee kann aber auch nur vorl\u00e4ufig sein und muss nicht als \u00dcbungsprojekt umgesetzt werden. Bedenken hinsichtlich einer drohenden Umsetzung sollten hier keine Rolle spielen. Ebenfalls muss die Idee nicht zwingend einzigartig oder neu sein. Ein anderer Blick oder eine andere Bedinung auf ein bestehendes Problem kann auch eine relevante Innovation hervorbringen. Nutzen Sie nun das Product Vision Board um Ihre Idee zu konkretisieren und alle relevanten Aspekte zu durchdenken. F\u00fcllen Sie das Template zum Product Vision Board aus. Ideenlos Falls Sie keine Ideen haben, k\u00f6nnen Sie eine der folgenden nehmen: Open Source Version der Prototyping on Paper App Regionale Touren App f\u00fcr Mountainbikeing, E-Biking oder sonstige Sportarten Lernkarten App","title":"\u00dcbung 2 (Vision)"},{"location":"%C3%BCbungen/01/#ubung-3-user-journey","text":"Nachdem die Vision entwickelt wurde, \u00fcberlegen Sie sich mit Hilfe des UML Use-Case Diagramms die User Journey durch die App. Nutzen Sie dazu das verlinkte Zeichen Werkzeug. Die \u00dcbung kann ebenfalls in der Gruppe gel\u00f6st werden.","title":"\u00dcbung 3 (User Journey)"},{"location":"%C3%BCbungen/01/#ubung-4-app-screens","text":"Als letzter Schritt sollten Screens der App entworfen werden. In den meisten F\u00e4llen entspricht jeder Use-Case im Diagramm (Oval im Diagramm) einem Screen. Die Screens k\u00f6nnen einfach mit Bleistift und Papier gezeichnete werden und fotografiert werden (Prototyping on Paper Workflow in der App). Sie k\u00f6nnen nat\u00fcrlich auch andere Werkzeuge verwenden, falls Ihnen das vorgeschlagene nicht zusagt. Wichtig ist nur, dass wir uns in der Prototypen Phase befinden, es geht nicht darum perfekte und sch\u00f6n gestylte Screens zu machen. Die Usability und Idee steht im Vordergrund.","title":"\u00dcbung 4 (App Screens)"},{"location":"%C3%BCbungen/02/","text":"\u00dcbungsblatt 2 \u00dcbung 1 Die Android Dokumentation stellt ein gut dokumentiertes Tutorial \"Build your first app\" bereit. Dieses Tutorial soll Schritt f\u00fcr Schritt durchgearbeitet werden. \u00dcbung 2 Erstellen Sie eine neue App mit dem Namen \u201eSixteen Buttons\u201c. Diese App soll einen Screen besitzen und ein Layout. Das Layout soll dabei ein LinearLayout sein, welches programmatisch beim Start der Activity mit 16 Buttons bef\u00fcllt wird (siehe Screenshot). Wichtig zu beachten ist, dass das LinearLayout von einer ScrollView umgeben sein soll, sodass Buttons die nicht in den Screen passen durch Scrollen erreichbar sind. Die Buttons sollen mit dem Text Button 1 bis Button 16 beschriftet sein. Hinweis Die 16 Buttons sollen innerhalb einer Schleife in der Methode onCreate hinzugef\u00fcgt werden. Mit der Methode findViewById kann das LinearLayout im Java Code referenziert werden. Das LinearLayout erbt von ViewGroup und verf\u00fcgt deshalb \u00fcber die Methode addView . Mit der Methode addView k\u00f6nnen die Buttons dem Layout hinzugef\u00fcgt werden. \u00dcbung 3 Mit Klick auf einen der Buttons soll ein Toast abgesetzt werden. Der Inhalt des Toasts soll folgender sein: Klick auf Button x Dabei soll der Platzhalter x mit der entsprechenden Nummerierung des Buttons ausgetauscht werden. Hierbei kann der Wert der Button Aufschrift genutzt werden, welche in der vorhergehenden \u00dcbung gesetzt wurde. Mit der Methode getText der Klasse Button kann dieser Wert abgefragt werden. Hinweis Im Android Framework ist die Klasse Toast definiert und die statische Methode Toast.makeText . Mit dieser Methode kann ein Toast erzeugt werden. Weitere Details finden Sie hier . \u00dcbung 4 Das Layout in der unten angef\u00fchrten Abbildung soll exakt nachgebaut werden. Es sollen daf\u00fcr nur LinearLayouts verwendet werden: Layouts k\u00f6nnen verschachtelt werden. Mit Gravity (gravity) kann die Ausrichtung angegeben werden (Buttons rechts, Text Nachricht oben). Mit Weight (layout_weight) kann der Platz den eine View innerhalb eines LinearLayouts einnehmen soll bestimmt werden. Attribute der View wie BackgroundTint oder Hint beachten.","title":"\u00dcbungsblatt 2"},{"location":"%C3%BCbungen/02/#ubungsblatt-2","text":"","title":"\u00dcbungsblatt 2"},{"location":"%C3%BCbungen/02/#ubung-1","text":"Die Android Dokumentation stellt ein gut dokumentiertes Tutorial \"Build your first app\" bereit. Dieses Tutorial soll Schritt f\u00fcr Schritt durchgearbeitet werden.","title":"\u00dcbung 1"},{"location":"%C3%BCbungen/02/#ubung-2","text":"Erstellen Sie eine neue App mit dem Namen \u201eSixteen Buttons\u201c. Diese App soll einen Screen besitzen und ein Layout. Das Layout soll dabei ein LinearLayout sein, welches programmatisch beim Start der Activity mit 16 Buttons bef\u00fcllt wird (siehe Screenshot). Wichtig zu beachten ist, dass das LinearLayout von einer ScrollView umgeben sein soll, sodass Buttons die nicht in den Screen passen durch Scrollen erreichbar sind. Die Buttons sollen mit dem Text Button 1 bis Button 16 beschriftet sein. Hinweis Die 16 Buttons sollen innerhalb einer Schleife in der Methode onCreate hinzugef\u00fcgt werden. Mit der Methode findViewById kann das LinearLayout im Java Code referenziert werden. Das LinearLayout erbt von ViewGroup und verf\u00fcgt deshalb \u00fcber die Methode addView . Mit der Methode addView k\u00f6nnen die Buttons dem Layout hinzugef\u00fcgt werden.","title":"\u00dcbung 2"},{"location":"%C3%BCbungen/02/#ubung-3","text":"Mit Klick auf einen der Buttons soll ein Toast abgesetzt werden. Der Inhalt des Toasts soll folgender sein: Klick auf Button x Dabei soll der Platzhalter x mit der entsprechenden Nummerierung des Buttons ausgetauscht werden. Hierbei kann der Wert der Button Aufschrift genutzt werden, welche in der vorhergehenden \u00dcbung gesetzt wurde. Mit der Methode getText der Klasse Button kann dieser Wert abgefragt werden. Hinweis Im Android Framework ist die Klasse Toast definiert und die statische Methode Toast.makeText . Mit dieser Methode kann ein Toast erzeugt werden. Weitere Details finden Sie hier .","title":"\u00dcbung 3"},{"location":"%C3%BCbungen/02/#ubung-4","text":"Das Layout in der unten angef\u00fchrten Abbildung soll exakt nachgebaut werden. Es sollen daf\u00fcr nur LinearLayouts verwendet werden: Layouts k\u00f6nnen verschachtelt werden. Mit Gravity (gravity) kann die Ausrichtung angegeben werden (Buttons rechts, Text Nachricht oben). Mit Weight (layout_weight) kann der Platz den eine View innerhalb eines LinearLayouts einnehmen soll bestimmt werden. Attribute der View wie BackgroundTint oder Hint beachten.","title":"\u00dcbung 4"},{"location":"%C3%BCbungen/03/","text":"\u00dcbungsblatt 3: Simon Game \u00dcbung 1 In diesem \u00dcbungsblatt soll das Spiel \"Simon Game\" realisiert werden. Innerhalb der \u00dcbung 1 soll das Spiellayout erstellt werden. Dazu gibt es ein Videotutorial , welches befolgt werden soll. \u00c4nderungen im Video Anstelle des Button soll ein ImageButton verwendet werden. Der ImageButton hat das Attribut src . An dieses Attribut soll die Drawable Resource gesetzt werden. Der background des ImageButton soll mit dem Wert @android:color/transparent gesetzt werden. \u00dcbung 2 Die 4 Buttons des Spiels k\u00f6nnen innerhalb eines Arrays hinterlegt werden (als Eigenschaft der Activity), welches in der onCreate Methode initialisiert werden soll. Die Buttons k\u00f6nnen \u00fcber die Methode findViewById aus dem Layout abgefragt werden. Zus\u00e4tzlich soll eine Methode animateButtons erzeugt werden, welche eine Liste von Indizes (0 bis 3) f\u00fcr die einzelnen Buttons enth\u00e4lt. Die Indizes Liste soll nacheinander animiert \"abgespielt\" werden. public void animateButtons ( List < Integer > sequence ) { // Sequenzielles Blinken implementieren } Mit dem ObjectAnimator k\u00f6nnen die Buttons animiert werden und damit kann die Blinkeigenschaft des Spieles erzeugt werden. Das Blinken des Buttons soll \u00fcber die Animation des Alphawerts von 100% auf 40% und wieder zur\u00fcck gesetzt werden. Die Instanzen der ObjectAnimator Klasse k\u00f6nnen als Array in ein AnimatorSet \u00fcber die Methode playSequentially hinzugef\u00fcgt werden. Das AnimatorSet kann dann \u00fcber die Methode start abgespielt werden. Somit k\u00f6nnen die entsprechenden Buttons sequentiell nacheinander animiert werden. // Array von ObjectAnimator Instanzen erzeugen ObjectAnimator [] oas = new ObjectAnimator [ sequence . size () ] ; // ObjectAnimator Instanzen erzeugen und im oas Array hinzuf\u00fcgen for ( int i = 0 ; i < oas . length ; i ++ ) { // TODO: ObjectAnimator erzeugen \"ofFloat\" und im // oas Array hinzuf\u00fcgen: // oas[i] = ... } AnimatorSet am = new AnimatorSet (); // Array von ObjectAnimator Instanzen hinzuf\u00fcgen am . playSequentially ( oas ); // Alle ObjectAnimator Instanzen abspielen am . start (); Als Test soll in der Methode onCreate die Methode animateButtons mit einer Testsequenz aufgerufen werden. Zum Beispiel w\u00fcrde die folgende Sequenz die 4 Buttons nacheinander abspielen. animateButtons ( Arrays . asList ( 0 , 1 , 2 , 3 )); Ein anderer Aufruf k\u00f6nnte auch wie unten aussehen, versuchen Sie verschiedene Sequenzen, um zu pr\u00fcfen ob die Methode animateButtons korrekt funktioniert. animateButtons ( Arrays . asList ( 3 , 1 , 0 , 3 , 2 , 1 )); \u00dcbung 3 Die Sequenz, welche animiert werden soll, soll Schritt f\u00fcr Schritt \u00fcber eine Zufallszahl zwischen 0 und 3 erzeugt werden. Nach jedem erfolgreichen Abspielen der Benutzer:in soll die Sequenz um eine Zufallszahl zwischen 0 und 3 erweitert werden.Bei Start der App soll eine ArrayList (diese kann dynamisch erweitert werden) mit einem Zufallswert erstellt werden (zB [3]). Der Ablauf des Spiels soll dann folgenderma\u00dfen gestaltet sein: Abspielen der Sequenz \u00fcber die Methode animateButtons (\u00dcbung 2). W\u00e4hrend des Abspielen sollen die Buttons deaktiviert sein. Nach dem Abspielen sollten alle Buttons aktiviert sein und \u00fcber Click-Events Schritt f\u00fcr Schritt gepr\u00fcft werden, ob die eingehenden Klicks in der Reichenfolge sind, entsprechend der generierten Sequenz. Falls die Sequenz von der Benutzer:in richtig wiedergegeben wurde, soll eine neue Zufallszahl (zwischen 0 und 3) erzeugt werden und in der ArrayList hinzugef\u00fcgt werden. Danach soll wieder bei Schritt 1 gestartet werden. Falls die Sequenz von der Benutzer:in nicht richtig wiedergegeben wurde, soll die L\u00e4nge der richtig gespielten Buttons \u00fcber ein Extra an eine GameOverActivity (\u00dcbung 4) \u00fcbergeben werden. Hinweis Buttons k\u00f6nnen \u00fcber die Methode setEnabled aktiviert oder deaktiviert werden. \u00dcbung 4 Es sollen 2 weitere Activities eingef\u00fchrt werden und die aktuelle MainActivity soll zu einer GameActivity refactored werden: Es soll eine neue MainActivity geben, welche 2 Buttons enth\u00e4lt, welche das Spiel entweder im Normalen Modus oder im Schnellen Modus starten k\u00f6nnen. \u00dcber ein Extra im Intent sollen unterschiedliche Werte f\u00fcr die Duration der Animationen \u00fcbergeben werden (eine schnelle und eine normale Variante). Die GameActivity soll das Spiel enthalten, also alles was von \u00dcbung 1 bis \u00dcbung 3 implementiert wurde. Die GameOverActivity soll die Anzahl der richtig gespielten Buttons anzeigen. Allgemeiner Hinweis Die Action Bar kann \u00fcber den Aufruf getSupportActionBar().hide() in der onCreate Methode der Activity ausgeblendet werden.","title":"\u00dcbungsblatt 3"},{"location":"%C3%BCbungen/03/#ubungsblatt-3-simon-game","text":"","title":"\u00dcbungsblatt 3: Simon Game"},{"location":"%C3%BCbungen/03/#ubung-1","text":"In diesem \u00dcbungsblatt soll das Spiel \"Simon Game\" realisiert werden. Innerhalb der \u00dcbung 1 soll das Spiellayout erstellt werden. Dazu gibt es ein Videotutorial , welches befolgt werden soll. \u00c4nderungen im Video Anstelle des Button soll ein ImageButton verwendet werden. Der ImageButton hat das Attribut src . An dieses Attribut soll die Drawable Resource gesetzt werden. Der background des ImageButton soll mit dem Wert @android:color/transparent gesetzt werden.","title":"\u00dcbung 1"},{"location":"%C3%BCbungen/03/#ubung-2","text":"Die 4 Buttons des Spiels k\u00f6nnen innerhalb eines Arrays hinterlegt werden (als Eigenschaft der Activity), welches in der onCreate Methode initialisiert werden soll. Die Buttons k\u00f6nnen \u00fcber die Methode findViewById aus dem Layout abgefragt werden. Zus\u00e4tzlich soll eine Methode animateButtons erzeugt werden, welche eine Liste von Indizes (0 bis 3) f\u00fcr die einzelnen Buttons enth\u00e4lt. Die Indizes Liste soll nacheinander animiert \"abgespielt\" werden. public void animateButtons ( List < Integer > sequence ) { // Sequenzielles Blinken implementieren } Mit dem ObjectAnimator k\u00f6nnen die Buttons animiert werden und damit kann die Blinkeigenschaft des Spieles erzeugt werden. Das Blinken des Buttons soll \u00fcber die Animation des Alphawerts von 100% auf 40% und wieder zur\u00fcck gesetzt werden. Die Instanzen der ObjectAnimator Klasse k\u00f6nnen als Array in ein AnimatorSet \u00fcber die Methode playSequentially hinzugef\u00fcgt werden. Das AnimatorSet kann dann \u00fcber die Methode start abgespielt werden. Somit k\u00f6nnen die entsprechenden Buttons sequentiell nacheinander animiert werden. // Array von ObjectAnimator Instanzen erzeugen ObjectAnimator [] oas = new ObjectAnimator [ sequence . size () ] ; // ObjectAnimator Instanzen erzeugen und im oas Array hinzuf\u00fcgen for ( int i = 0 ; i < oas . length ; i ++ ) { // TODO: ObjectAnimator erzeugen \"ofFloat\" und im // oas Array hinzuf\u00fcgen: // oas[i] = ... } AnimatorSet am = new AnimatorSet (); // Array von ObjectAnimator Instanzen hinzuf\u00fcgen am . playSequentially ( oas ); // Alle ObjectAnimator Instanzen abspielen am . start (); Als Test soll in der Methode onCreate die Methode animateButtons mit einer Testsequenz aufgerufen werden. Zum Beispiel w\u00fcrde die folgende Sequenz die 4 Buttons nacheinander abspielen. animateButtons ( Arrays . asList ( 0 , 1 , 2 , 3 )); Ein anderer Aufruf k\u00f6nnte auch wie unten aussehen, versuchen Sie verschiedene Sequenzen, um zu pr\u00fcfen ob die Methode animateButtons korrekt funktioniert. animateButtons ( Arrays . asList ( 3 , 1 , 0 , 3 , 2 , 1 ));","title":"\u00dcbung 2"},{"location":"%C3%BCbungen/03/#ubung-3","text":"Die Sequenz, welche animiert werden soll, soll Schritt f\u00fcr Schritt \u00fcber eine Zufallszahl zwischen 0 und 3 erzeugt werden. Nach jedem erfolgreichen Abspielen der Benutzer:in soll die Sequenz um eine Zufallszahl zwischen 0 und 3 erweitert werden.Bei Start der App soll eine ArrayList (diese kann dynamisch erweitert werden) mit einem Zufallswert erstellt werden (zB [3]). Der Ablauf des Spiels soll dann folgenderma\u00dfen gestaltet sein: Abspielen der Sequenz \u00fcber die Methode animateButtons (\u00dcbung 2). W\u00e4hrend des Abspielen sollen die Buttons deaktiviert sein. Nach dem Abspielen sollten alle Buttons aktiviert sein und \u00fcber Click-Events Schritt f\u00fcr Schritt gepr\u00fcft werden, ob die eingehenden Klicks in der Reichenfolge sind, entsprechend der generierten Sequenz. Falls die Sequenz von der Benutzer:in richtig wiedergegeben wurde, soll eine neue Zufallszahl (zwischen 0 und 3) erzeugt werden und in der ArrayList hinzugef\u00fcgt werden. Danach soll wieder bei Schritt 1 gestartet werden. Falls die Sequenz von der Benutzer:in nicht richtig wiedergegeben wurde, soll die L\u00e4nge der richtig gespielten Buttons \u00fcber ein Extra an eine GameOverActivity (\u00dcbung 4) \u00fcbergeben werden. Hinweis Buttons k\u00f6nnen \u00fcber die Methode setEnabled aktiviert oder deaktiviert werden.","title":"\u00dcbung 3"},{"location":"%C3%BCbungen/03/#ubung-4","text":"Es sollen 2 weitere Activities eingef\u00fchrt werden und die aktuelle MainActivity soll zu einer GameActivity refactored werden: Es soll eine neue MainActivity geben, welche 2 Buttons enth\u00e4lt, welche das Spiel entweder im Normalen Modus oder im Schnellen Modus starten k\u00f6nnen. \u00dcber ein Extra im Intent sollen unterschiedliche Werte f\u00fcr die Duration der Animationen \u00fcbergeben werden (eine schnelle und eine normale Variante). Die GameActivity soll das Spiel enthalten, also alles was von \u00dcbung 1 bis \u00dcbung 3 implementiert wurde. Die GameOverActivity soll die Anzahl der richtig gespielten Buttons anzeigen. Allgemeiner Hinweis Die Action Bar kann \u00fcber den Aufruf getSupportActionBar().hide() in der onCreate Methode der Activity ausgeblendet werden.","title":"\u00dcbung 4"},{"location":"%C3%BCbungen/04/","text":"\u00dcbungsblatt 4: Snake Projekt\u00fcbersicht Im Projekt finden Sie 3 Activities . Jeder Screen der App wird \u00fcber eine Activity realisiert. F\u00fcr jede Activity muss auch ein eigenes Layout als XML erstellt werden. Am Startscreen ( MainActivity ) finden sich 3 Buttons , welche jeweils \u00fcber einen Intent die GameActivity starten. Dabei soll der Intent \u00fcber ein Extra den Parameter difficulty \u00fcbergeben. Der Parameter bestimmt dabei wie schnell sich die Schlange in der GameActivity bewegen soll. Jenachdem welcher der 3 Buttons geklickt wurde, ist dies unterschiedlich. Die GameActivity enth\u00e4lt das entsprechende Spiel. Dabei wird eine eigene View implementiert, welche die Schlange enth\u00e4lt. Es gibt unten 4 Buttons welche die Bewegung der Schlange erm\u00f6glichen. Oben findet sich ebenfalls noch ein dynamisches Textfeld, welches f\u00fcr jede Bewegung, welche die Schlange macht um eins hochgez\u00e4hlt wird. Falls das Schlange an den Rand oder an einen Teil ihres K\u00f6rpers gespielt wird, ist das Spiel beendet. In diesem Fall soll die GameOverActivity ge\u00f6ffnet werden. Im Intent soll ein Extra mit der Anzahl der moves \u00fcbergeben werden. Diese sollen auch in der GameOverActivity angezeigt werden. Es gibt ebenfalls einen Button zum Restart des Spieles. Dieser soll zur MainActivity leiten (\u00fcber einen Intent ). Projekt clonen Es steht eine Ausgangsbasis f\u00fcr das Projekt bereit. Dieses ist \u00fcber Gitlab zu beziehen. Im Projekt finden sich alle Aufgaben als TODOS in Android Studio. Diese m\u00fcssen Schritt f\u00fcr Schritt abgearbeitet werden um das Spiel zu realisieren. Projekt Link: https://gitlab.web.fh-kufstein.ac.at/WEB21/app-zentrierte-softwareentwicklung/snake Klasse Snake Innerhalb der Klasse Snake befindet sich die gesamte Spiellogik. Das Spielbrett ist als 2-dimensionales Array abgebildet. Im unten angef\u00fchrten Beispiel wird beispielhaft ein Snake-Spiel innerhalb eines 6x6-Grid gezeigt. Dabei ist ein Apfel als -1 , der Schlangenkopf als -2 und die leeren Felder als 0 angezeigt. Der Schlangenk\u00f6rper besteht aus Zahlen gr\u00f6\u00dfer 0 und erh\u00f6ht sich in jedem Zug. #game { display:grid; grid-template-columns:1fr 1fr 1fr 1fr; } #game h2 { font-size:12px; } #game .grid { display:grid; grid-template-columns: 20px 20px 20px 20px 20px 20px; grid-template-rows: 20px 20px 20px 20px 20px 20px; } #game .grid > div { border:1px solid black; display:flex; justify-content:center; align-items:center; } Start 0 0 0 0 0 0 0 0 0 0 0 0 0 1 -2 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 Bewegung nach Rechts 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 -2 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 Bewegung nach Rechts 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 -2 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 Bewegung nach Unten 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 4 0 0 0 0 0 -2 0 0 -1 0 0 0 0 0 0 0 0 0 0 Bewegung nach Unten 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 5 0 0 -1 0 0 -2 0 0 0 0 0 0 0 Bewegung nach Links 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 -1 0 -2 6 0 0 0 0 0 0 0 Bewegung nach Links 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -2 7 6 0 0 0 0 0 0 0 Bewegung nach Links 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 -2 8 7 6 0 0 0 0 0 0 0 F\u00fcr die Klasse Snake ist ein UnitTest angelegt, welcher verwendet werden kann, um die Implentierung zu leiten. Mit Klick auf Play in der Klasse SnakeTest k\u00f6nnen die Tests ausgef\u00fchrt werden: Eigene View Klasse Die Klasse SnakeView ist eine quadratische View und zeichnet das Spielfeld. Zum entsprechenden Interval wird die Methode draw aufgerufen mit dem Spielfeld aus der Klasse Snake . Innerhalb der Methode onDraw wird dann das Spielfeld auf der bereitgestellten Canvas neu gezeichnet.","title":"\u00dcbungsblatt 4"},{"location":"%C3%BCbungen/04/#ubungsblatt-4-snake","text":"","title":"\u00dcbungsblatt 4: Snake"},{"location":"%C3%BCbungen/04/#projektubersicht","text":"Im Projekt finden Sie 3 Activities . Jeder Screen der App wird \u00fcber eine Activity realisiert. F\u00fcr jede Activity muss auch ein eigenes Layout als XML erstellt werden. Am Startscreen ( MainActivity ) finden sich 3 Buttons , welche jeweils \u00fcber einen Intent die GameActivity starten. Dabei soll der Intent \u00fcber ein Extra den Parameter difficulty \u00fcbergeben. Der Parameter bestimmt dabei wie schnell sich die Schlange in der GameActivity bewegen soll. Jenachdem welcher der 3 Buttons geklickt wurde, ist dies unterschiedlich. Die GameActivity enth\u00e4lt das entsprechende Spiel. Dabei wird eine eigene View implementiert, welche die Schlange enth\u00e4lt. Es gibt unten 4 Buttons welche die Bewegung der Schlange erm\u00f6glichen. Oben findet sich ebenfalls noch ein dynamisches Textfeld, welches f\u00fcr jede Bewegung, welche die Schlange macht um eins hochgez\u00e4hlt wird. Falls das Schlange an den Rand oder an einen Teil ihres K\u00f6rpers gespielt wird, ist das Spiel beendet. In diesem Fall soll die GameOverActivity ge\u00f6ffnet werden. Im Intent soll ein Extra mit der Anzahl der moves \u00fcbergeben werden. Diese sollen auch in der GameOverActivity angezeigt werden. Es gibt ebenfalls einen Button zum Restart des Spieles. Dieser soll zur MainActivity leiten (\u00fcber einen Intent ).","title":"Projekt\u00fcbersicht"},{"location":"%C3%BCbungen/04/#projekt-clonen","text":"Es steht eine Ausgangsbasis f\u00fcr das Projekt bereit. Dieses ist \u00fcber Gitlab zu beziehen. Im Projekt finden sich alle Aufgaben als TODOS in Android Studio. Diese m\u00fcssen Schritt f\u00fcr Schritt abgearbeitet werden um das Spiel zu realisieren. Projekt Link: https://gitlab.web.fh-kufstein.ac.at/WEB21/app-zentrierte-softwareentwicklung/snake","title":"Projekt clonen"},{"location":"%C3%BCbungen/04/#klasse-snake","text":"Innerhalb der Klasse Snake befindet sich die gesamte Spiellogik. Das Spielbrett ist als 2-dimensionales Array abgebildet. Im unten angef\u00fchrten Beispiel wird beispielhaft ein Snake-Spiel innerhalb eines 6x6-Grid gezeigt. Dabei ist ein Apfel als -1 , der Schlangenkopf als -2 und die leeren Felder als 0 angezeigt. Der Schlangenk\u00f6rper besteht aus Zahlen gr\u00f6\u00dfer 0 und erh\u00f6ht sich in jedem Zug. #game { display:grid; grid-template-columns:1fr 1fr 1fr 1fr; } #game h2 { font-size:12px; } #game .grid { display:grid; grid-template-columns: 20px 20px 20px 20px 20px 20px; grid-template-rows: 20px 20px 20px 20px 20px 20px; } #game .grid > div { border:1px solid black; display:flex; justify-content:center; align-items:center; }","title":"Klasse Snake"},{"location":"%C3%BCbungen/04/#eigene-view-klasse","text":"Die Klasse SnakeView ist eine quadratische View und zeichnet das Spielfeld. Zum entsprechenden Interval wird die Methode draw aufgerufen mit dem Spielfeld aus der Klasse Snake . Innerhalb der Methode onDraw wird dann das Spielfeld auf der bereitgestellten Canvas neu gezeichnet.","title":"Eigene View Klasse"},{"location":"%C3%BCbungen/05/","text":"\u00dcbungsblatt 5: Taskz Die Basis f\u00fcr dieses \u00dcbungsblatt ist das gemeinsam entwickelte Projekt Taskz . \u00dcbung 1 Das Erscheinungsbild der Activity ManageTaskActivity soll entsprechend der Vorgabe auf den Screenshots gestaltet werden. Die Formularfelder sollen den Outlined Text Fields aus dem Material Design f\u00fcr Android entsprechen. Das Eingabefeld f\u00fcr Description soll 5 Zeilen gro\u00df sein und der Text soll links oben positioniert sein. Dazu m\u00fcssen die Eigenschaften lines und gravity angepasst werden. Mit dem Button Set Date soll ein Date Picker ge\u00f6ffnet werden und die Auswahl eines Datum get\u00e4tigt werden k\u00f6nnen. Das Datum soll dann rechts neben dem Button angezeigt werden. Das entsprechende Format soll mit einem DateTimeFormatter entsprechend erzeugt werden. Oben rechts in der Action Bar soll das Speichern Icon gesetzt werden. Dies wird durch \u00fcberschreiben der onCreateOptionsMenu Methode bewerkstelligt, darin muss das Men\u00fc \"Inflated\". \u00dcber die Methode getMenuInflator kann eine Instanz der Klasse MenuInflator abgefragt werden, dieser besitzt die Methode inflate , welche genutzt werden soll. Die Resource zum Men\u00fc soll \u00fcbergeben werden. \u00dcbung 2 Mit Klick auf das Speicher Icon in der ManageTaskActivity soll der Task in der Datenbank gespeichert werden. Es soll zur\u00fcck zur MainActivity navigiert werden. Dort soll sichergestellt werden, dass der neu angelegte Task angezeigt wird. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden. \u00dcbung 3 Der Screen der MainActivity soll entsprechend angepasst werden. So sollen die Listeneintr\u00e4ge \u00fcber Cards repr\u00e4sentiert werden. Ebenfalls soll ein Floating Action Button eingef\u00fcgt werden. Mit Klick auf den Button soll die ManageTaskActivity ge\u00f6ffnet werden. \u00dcbung 4 Mit Klick auf den Remove Button auf einer Task Card soll ein entsprechender Dialog , anhand der Vorgabe aus dem Screenshot, ge\u00f6ffnet werden. Die Best\u00e4tigung des L\u00f6schvorgangs soll zum tats\u00e4chlichen L\u00f6schen des Task in der Datenbank f\u00fchren. Ebenfalls soll sichergestellt werden, dass die Anzeige den Task entfernt. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden. \u00dcbung 5 Mit Klick auf den Edit Button auf einer Task Card soll die ManageTaskActivity ge\u00f6ffnet werden. \u00dcber den Intent soll die ID des Task \u00fcbergeben werden. In der Activity soll der entsprechende Task im Formular angezeigt werden. Mit Klick auf Speichern soll der Task in der Datenbank gespeichert werden. Es soll zur\u00fcck zur MainActivity navigiert werden. Dort soll sichergestellt werden, dass der editierte Task neu angezeigt wird. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden.","title":"\u00dcbungsblatt 5"},{"location":"%C3%BCbungen/05/#ubungsblatt-5-taskz","text":"Die Basis f\u00fcr dieses \u00dcbungsblatt ist das gemeinsam entwickelte Projekt Taskz .","title":"\u00dcbungsblatt 5: Taskz"},{"location":"%C3%BCbungen/05/#ubung-1","text":"Das Erscheinungsbild der Activity ManageTaskActivity soll entsprechend der Vorgabe auf den Screenshots gestaltet werden. Die Formularfelder sollen den Outlined Text Fields aus dem Material Design f\u00fcr Android entsprechen. Das Eingabefeld f\u00fcr Description soll 5 Zeilen gro\u00df sein und der Text soll links oben positioniert sein. Dazu m\u00fcssen die Eigenschaften lines und gravity angepasst werden. Mit dem Button Set Date soll ein Date Picker ge\u00f6ffnet werden und die Auswahl eines Datum get\u00e4tigt werden k\u00f6nnen. Das Datum soll dann rechts neben dem Button angezeigt werden. Das entsprechende Format soll mit einem DateTimeFormatter entsprechend erzeugt werden. Oben rechts in der Action Bar soll das Speichern Icon gesetzt werden. Dies wird durch \u00fcberschreiben der onCreateOptionsMenu Methode bewerkstelligt, darin muss das Men\u00fc \"Inflated\". \u00dcber die Methode getMenuInflator kann eine Instanz der Klasse MenuInflator abgefragt werden, dieser besitzt die Methode inflate , welche genutzt werden soll. Die Resource zum Men\u00fc soll \u00fcbergeben werden.","title":"\u00dcbung 1"},{"location":"%C3%BCbungen/05/#ubung-2","text":"Mit Klick auf das Speicher Icon in der ManageTaskActivity soll der Task in der Datenbank gespeichert werden. Es soll zur\u00fcck zur MainActivity navigiert werden. Dort soll sichergestellt werden, dass der neu angelegte Task angezeigt wird. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden.","title":"\u00dcbung 2"},{"location":"%C3%BCbungen/05/#ubung-3","text":"Der Screen der MainActivity soll entsprechend angepasst werden. So sollen die Listeneintr\u00e4ge \u00fcber Cards repr\u00e4sentiert werden. Ebenfalls soll ein Floating Action Button eingef\u00fcgt werden. Mit Klick auf den Button soll die ManageTaskActivity ge\u00f6ffnet werden.","title":"\u00dcbung 3"},{"location":"%C3%BCbungen/05/#ubung-4","text":"Mit Klick auf den Remove Button auf einer Task Card soll ein entsprechender Dialog , anhand der Vorgabe aus dem Screenshot, ge\u00f6ffnet werden. Die Best\u00e4tigung des L\u00f6schvorgangs soll zum tats\u00e4chlichen L\u00f6schen des Task in der Datenbank f\u00fchren. Ebenfalls soll sichergestellt werden, dass die Anzeige den Task entfernt. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden.","title":"\u00dcbung 4"},{"location":"%C3%BCbungen/05/#ubung-5","text":"Mit Klick auf den Edit Button auf einer Task Card soll die ManageTaskActivity ge\u00f6ffnet werden. \u00dcber den Intent soll die ID des Task \u00fcbergeben werden. In der Activity soll der entsprechende Task im Formular angezeigt werden. Mit Klick auf Speichern soll der Task in der Datenbank gespeichert werden. Es soll zur\u00fcck zur MainActivity navigiert werden. Dort soll sichergestellt werden, dass der editierte Task neu angezeigt wird. Der implementierte Adapter kann \u00fcber eine der unterschiedlichen notify Methoden zum Neuladen der Datenquelle veranlasst werden.","title":"\u00dcbung 5"},{"location":"%C3%BCbungen/_02/","text":"Simon Game \u00dcbung 0 In diesem \u00dcbungsblatt soll das Spiel \"Simon Game\" realisiert werden. Innerhalb der \u00dcbung 0 soll das Spiellayout erstellt werden. Dazu gibt es ein Videotutorial (https://www.youtube.com/watch?v=uvath6G45V4) , welches befolgt werden soll. \u00c4nderungen im Video Anstelle des Button soll ein ImageButton verwendet werden. Der ImageButton hat das Attribut src . An dieses Attribut soll die Drawable Resource gesetzt werden. Der background des ImageButton soll mit dem Wert @android:color/transparent gesetzt werden. \u00dcbung 1 (2h) Die 4 Buttons des Spiels k\u00f6nnen innerhalb eines Arrays hinterlegt werden (als Eigentschaft der Activity), welches in der onCreate Methode initialisiert werden soll. Zus\u00e4tzlich soll eine Methode animateButtons erzeugt werden, welche eine Sequenz von Indizes (0 bis 3) f\u00fcr die einzelnen Buttons enth\u00e4lt. Die Indizes Sequenz soll nacheinander abgespielt werden. public void animateButtons ( int [] sequence ) { // Sequenzielles Blinken implementieren } Mit dem ObjectAnimator k\u00f6nnen die Buttons animiert werden und damit kann die Blinkeigenschaft des Spieles erzeugt werden. Das Blinken des Buttons soll \u00fcber die Animation des Alphawerts von 100% auf 60% gesetzt und wieder zur\u00fcck gesetzt werden. Die Instanzen der ObjectAnimator Klasse k\u00f6nnen als Array in ein AnimatorSet \u00fcber die Methode playSequentially hinzugef\u00fcgt werden. Das AnimatorSet kann dann \u00fcber die Methode start abgespielt werden. // Array von ObjectAnimator Instanzen erzeugen ObjectAnimator [] oas = new ObjectAnimator [ sequence . length ] ; // ObjectAnimator Instanzen erzeugen und im oas Array hinzuf\u00fcgen for ( int i = 0 ; i < oas . length ; i ++ ) { // oas[i] = ... } AnimatorSet am = new AnimatorSet (); // Array von ObjectAnimator Instanzen hinzuf\u00fcgen am . playSequentially ( oas ); // Alle ObjectAnimator Instanzen abspielen am . start (); Als Test soll in der Methode onCreate die Methode animateButtons mit einer Testsequenz aufgerufen werden. Zum Beispiel w\u00fcrde die folgende Sequenz die 4 Buttons nacheinander abspielen. animateButtons ( int [] { 0 , 1 , 2 , 3 }); \u00dcbung 2 (1h) Die Buttons des Spiels sollen mit einem View.OnTouchListener verkn\u00fcpft werden. Der View.OnTouchListener kann zum Beispiel direkt in der Activity implementiert werden. Beim Eintreten des Events ACTION_DOWN soll der Alphawert des Buttons auf 60% gesetzt werden. Beim Eintreten des Events ACTION_UP soll der Alphawert wieder auf 100% gesetzt werden. \u00dcbung 3 (3h) Die Sequenz, welche animiert werden soll, soll Schritt f\u00fcr Schritt \u00fcber eine Zufallszahl zwischen 0 und 3 erzeugt werden. Bei Start der App soll eine ArrayList (diese kann dynamisch erweitert werden) mit einem Zufallswert erstellt werden (zB [3]). Der Ablauf des Spiels soll dann folgenderma\u00dfen gestaltet sein: Abspielen der Sequenz \u00fcber die Methode animateButtons (\u00dcbung 1). W\u00e4hrend des Abspielen sollen die Buttons deaktiviert sein. Nach dem Abspielen sollten alle Buttons aktiviert sein und \u00fcber Touch-Events (\u00dcbung 2) Schritt f\u00fcr Schritt gepr\u00fcft werden ob die eingehenden Klicks in der Reichenfolge sind, wie gew\u00fcnscht in der generierten Sequenz. Falls die Sequenz von der Benutzerin richtig wiedergegeben wurde, soll eine neue Zufallszahl (zwischen 0 und 3) erzeugt werden und in der ArrayList hinzugef\u00fcgt werden. Danach soll wieder bei Schritt 1 gestartet werden. Falls die Sequenz von der Benutzerin nicht richtig wiedergegeben wurde, soll die L\u00e4nge der richtig gespielten Buttons \u00fcber ein Extra an eine GameOverActivity (\u00dcbung 4) \u00fcbergeben werden. Hinweis 1 Eine einfache M\u00f6glichkeit um eine ArrayList<Integer> in ein int[] Array zu \u00fcberf\u00fchren ist \u00fcber eine Schleife, wie im folgenden Snippet demonstriert: ArrayList < Integer > list = new ArrayList <> (); // ... Eintr\u00e4ge hinzuf\u00fcgen int sequence [] = new int [ list . size () ] ; for ( int i = 0 ; i < sequence . length ; i ++ ) { sequence [ i ] = list . get ( i ); } Hinweis 2 Buttons k\u00f6nnen \u00fcber die Methode setEnabled aktiviert oder deaktiviert werden. Hinweis 3 Auf das Ende der Animationssequenz des AnimatorSet kann \u00fcber einen Listener reagiert werden ( Dokumentation (https://developer.android.com/guide/topics/graphics/prop-animation?hl=en#listeners) ). \u00dcbung 4 (2h) Es sollen 2 weitere Activities eingef\u00fchrt werden und die aktuelle MainActivity soll zu einer GameActivity refactored werden: Es soll eine neue MainActivity geben, welche 2 Buttons enth\u00e4lt, welche das Spiel entweder im Normalen Modus oder im Schnellen Modus starten k\u00f6nnen. \u00dcber ein Extra im Intent sollen unterschiedliche Werte f\u00fcr die Duration der Animationen \u00fcbergeben werden (eine schnelle und eine normale Variante). Die GameActivity soll das Spiel enthalten, also alles was von \u00dcbung 0 bis \u00dcbung 3 implementiert wurde. Die GameOverActivity soll die Anzahl der richtig gespielten Buttons anzeigen. \u00dcbung 5 (1h) F\u00fcr die 3 Buttons ( Normal Mode , Fast Mode und Restart ), die Textfelder und den Hintergrund sollen jeweils Variablen f\u00fcr die Farben bzw. Styles erstellt werden. Die Styles bzw. Farbvariablen sollen entsprechend mit den UI-Elementen verkn\u00fcpft werden. Folgend findet sich eine beispielhafte Angabe der Styles: <style name= \"Theme.SimonGame.GameButton\" parent= \"Widget.MaterialComponents.Button\" > <!-- items --> </style> <style name= \"Theme.SimonGame.GameText\" parent= \"Widget.MaterialComponents.TextView\" > <!-- items --> </style> \u00dcbung 6 (1h) F\u00fcr das Spiel soll es m\u00f6glich sein, dass zwischen einem normalen und einem dunklen Design gewechselt werden kann. Jenachdem welche Systemeinstellung die Benutzerin trifft, soll sich auch die App anpassen. Die entsprechenden Farbwerte, welche in \u00dcbung 5 definiert wurden, sollten \u00fcber den night Qualifier \u00fcberladen werden. Das rechte Bild zeigt das Spiel im normalen Design.","title":"Simon Game"},{"location":"%C3%BCbungen/_02/#simon-game","text":"","title":"Simon Game"},{"location":"%C3%BCbungen/_02/#ubung-0","text":"In diesem \u00dcbungsblatt soll das Spiel \"Simon Game\" realisiert werden. Innerhalb der \u00dcbung 0 soll das Spiellayout erstellt werden. Dazu gibt es ein Videotutorial (https://www.youtube.com/watch?v=uvath6G45V4) , welches befolgt werden soll. \u00c4nderungen im Video Anstelle des Button soll ein ImageButton verwendet werden. Der ImageButton hat das Attribut src . An dieses Attribut soll die Drawable Resource gesetzt werden. Der background des ImageButton soll mit dem Wert @android:color/transparent gesetzt werden.","title":"\u00dcbung 0"},{"location":"%C3%BCbungen/_02/#ubung-1-2h","text":"Die 4 Buttons des Spiels k\u00f6nnen innerhalb eines Arrays hinterlegt werden (als Eigentschaft der Activity), welches in der onCreate Methode initialisiert werden soll. Zus\u00e4tzlich soll eine Methode animateButtons erzeugt werden, welche eine Sequenz von Indizes (0 bis 3) f\u00fcr die einzelnen Buttons enth\u00e4lt. Die Indizes Sequenz soll nacheinander abgespielt werden. public void animateButtons ( int [] sequence ) { // Sequenzielles Blinken implementieren } Mit dem ObjectAnimator k\u00f6nnen die Buttons animiert werden und damit kann die Blinkeigenschaft des Spieles erzeugt werden. Das Blinken des Buttons soll \u00fcber die Animation des Alphawerts von 100% auf 60% gesetzt und wieder zur\u00fcck gesetzt werden. Die Instanzen der ObjectAnimator Klasse k\u00f6nnen als Array in ein AnimatorSet \u00fcber die Methode playSequentially hinzugef\u00fcgt werden. Das AnimatorSet kann dann \u00fcber die Methode start abgespielt werden. // Array von ObjectAnimator Instanzen erzeugen ObjectAnimator [] oas = new ObjectAnimator [ sequence . length ] ; // ObjectAnimator Instanzen erzeugen und im oas Array hinzuf\u00fcgen for ( int i = 0 ; i < oas . length ; i ++ ) { // oas[i] = ... } AnimatorSet am = new AnimatorSet (); // Array von ObjectAnimator Instanzen hinzuf\u00fcgen am . playSequentially ( oas ); // Alle ObjectAnimator Instanzen abspielen am . start (); Als Test soll in der Methode onCreate die Methode animateButtons mit einer Testsequenz aufgerufen werden. Zum Beispiel w\u00fcrde die folgende Sequenz die 4 Buttons nacheinander abspielen. animateButtons ( int [] { 0 , 1 , 2 , 3 });","title":"\u00dcbung 1 (2h)"},{"location":"%C3%BCbungen/_02/#ubung-2-1h","text":"Die Buttons des Spiels sollen mit einem View.OnTouchListener verkn\u00fcpft werden. Der View.OnTouchListener kann zum Beispiel direkt in der Activity implementiert werden. Beim Eintreten des Events ACTION_DOWN soll der Alphawert des Buttons auf 60% gesetzt werden. Beim Eintreten des Events ACTION_UP soll der Alphawert wieder auf 100% gesetzt werden.","title":"\u00dcbung 2 (1h)"},{"location":"%C3%BCbungen/_02/#ubung-3-3h","text":"Die Sequenz, welche animiert werden soll, soll Schritt f\u00fcr Schritt \u00fcber eine Zufallszahl zwischen 0 und 3 erzeugt werden. Bei Start der App soll eine ArrayList (diese kann dynamisch erweitert werden) mit einem Zufallswert erstellt werden (zB [3]). Der Ablauf des Spiels soll dann folgenderma\u00dfen gestaltet sein: Abspielen der Sequenz \u00fcber die Methode animateButtons (\u00dcbung 1). W\u00e4hrend des Abspielen sollen die Buttons deaktiviert sein. Nach dem Abspielen sollten alle Buttons aktiviert sein und \u00fcber Touch-Events (\u00dcbung 2) Schritt f\u00fcr Schritt gepr\u00fcft werden ob die eingehenden Klicks in der Reichenfolge sind, wie gew\u00fcnscht in der generierten Sequenz. Falls die Sequenz von der Benutzerin richtig wiedergegeben wurde, soll eine neue Zufallszahl (zwischen 0 und 3) erzeugt werden und in der ArrayList hinzugef\u00fcgt werden. Danach soll wieder bei Schritt 1 gestartet werden. Falls die Sequenz von der Benutzerin nicht richtig wiedergegeben wurde, soll die L\u00e4nge der richtig gespielten Buttons \u00fcber ein Extra an eine GameOverActivity (\u00dcbung 4) \u00fcbergeben werden. Hinweis 1 Eine einfache M\u00f6glichkeit um eine ArrayList<Integer> in ein int[] Array zu \u00fcberf\u00fchren ist \u00fcber eine Schleife, wie im folgenden Snippet demonstriert: ArrayList < Integer > list = new ArrayList <> (); // ... Eintr\u00e4ge hinzuf\u00fcgen int sequence [] = new int [ list . size () ] ; for ( int i = 0 ; i < sequence . length ; i ++ ) { sequence [ i ] = list . get ( i ); } Hinweis 2 Buttons k\u00f6nnen \u00fcber die Methode setEnabled aktiviert oder deaktiviert werden. Hinweis 3 Auf das Ende der Animationssequenz des AnimatorSet kann \u00fcber einen Listener reagiert werden ( Dokumentation (https://developer.android.com/guide/topics/graphics/prop-animation?hl=en#listeners) ).","title":"\u00dcbung 3 (3h)"},{"location":"%C3%BCbungen/_02/#ubung-4-2h","text":"Es sollen 2 weitere Activities eingef\u00fchrt werden und die aktuelle MainActivity soll zu einer GameActivity refactored werden: Es soll eine neue MainActivity geben, welche 2 Buttons enth\u00e4lt, welche das Spiel entweder im Normalen Modus oder im Schnellen Modus starten k\u00f6nnen. \u00dcber ein Extra im Intent sollen unterschiedliche Werte f\u00fcr die Duration der Animationen \u00fcbergeben werden (eine schnelle und eine normale Variante). Die GameActivity soll das Spiel enthalten, also alles was von \u00dcbung 0 bis \u00dcbung 3 implementiert wurde. Die GameOverActivity soll die Anzahl der richtig gespielten Buttons anzeigen.","title":"\u00dcbung 4 (2h)"},{"location":"%C3%BCbungen/_02/#ubung-5-1h","text":"F\u00fcr die 3 Buttons ( Normal Mode , Fast Mode und Restart ), die Textfelder und den Hintergrund sollen jeweils Variablen f\u00fcr die Farben bzw. Styles erstellt werden. Die Styles bzw. Farbvariablen sollen entsprechend mit den UI-Elementen verkn\u00fcpft werden. Folgend findet sich eine beispielhafte Angabe der Styles: <style name= \"Theme.SimonGame.GameButton\" parent= \"Widget.MaterialComponents.Button\" > <!-- items --> </style> <style name= \"Theme.SimonGame.GameText\" parent= \"Widget.MaterialComponents.TextView\" > <!-- items --> </style>","title":"\u00dcbung 5 (1h)"},{"location":"%C3%BCbungen/_02/#ubung-6-1h","text":"F\u00fcr das Spiel soll es m\u00f6glich sein, dass zwischen einem normalen und einem dunklen Design gewechselt werden kann. Jenachdem welche Systemeinstellung die Benutzerin trifft, soll sich auch die App anpassen. Die entsprechenden Farbwerte, welche in \u00dcbung 5 definiert wurden, sollten \u00fcber den night Qualifier \u00fcberladen werden. Das rechte Bild zeigt das Spiel im normalen Design.","title":"\u00dcbung 6 (1h)"},{"location":"%C3%BCbungen/_03/","text":"\u00dcbungsblatt 3 \u00dcbung 0 In der \u00dcbung 0 soll gemeinsam die Grundlage f\u00fcr die App Task Master entwickelt werden. Es sollen \u00fcber das Room Framework eigene Tasks verwaltet werden k\u00f6nnen. Ein Task soll dabei folgenden Aufbau haben: @Entity class Task { @PrimaryKey ( autoGenerate = true ) public int id ; public String title ; public int priority ; public Date dueDate ; } \u00dcbung 1 (1h) Es sollen einige kosmetische \u00c4nderungen vorgenommen werden: Zwischen den einzelnen Listenelementen sollen Trennlinien erstellt werden. Dazu k\u00f6nnen sog. Dekoratoren ( ItemDecoration ) f\u00fcr die RecyclerView verwendet werden. \u00dcber die Methode addItemDecoration kann eine Instanz der Klasse DividerItemDecoration \u00fcbergeben werden. Es soll ein FloatingActionButton am rechten unteren Rand hinzugef\u00fcgt werden. Bei Klick auf diesen Button soll eine neue Activity ( ManageTaskActivity ) ge\u00f6ffnet werden. Der FloatingActionButton soll mit einem Icon ausgestattet werden. Suchen Sie dazu ein passendes SVG Icon im Internet (zB Ionicons , FontAwesome , Feather Icons ). Im Android Studio kann das SVG-Icon \u00fcber File > New > Vector Asset als Drawable im Projekt hinzugef\u00fcgt werden. \u00dcbung 2 (1h) Das Erscheinungsbild der Activity ManageTaskActivity soll entsprechend gestaltet werden. Im ersten Schritt sollen die Formularfelder erstellt werden. Jedes Formularfeld hat links oben eine TextView als Label positioniert. Folgende Formularfelder kommen zum Einsatz: F\u00fcr den Titel des Tasks soll ein EditText zum Einsatz kommen. F\u00fcr die Auswahl des Datums soll ein DatePicker verwendet werden. Dabei sollen die Attribute datePickerMode als spinner und calendarViewShown als false gesetzt werden. F\u00fcr die Auswahl der Priorit\u00e4t soll ein Spinner im spinnerMode dialog verwendet werden. Die Eintr\u00e4ge im Spinner k\u00f6nnen \u00fcber das Attribut entries gesetzt werden. Dazu muss ein string-array als Resource Type Values angelegt werden und mit dem Spinner verkn\u00fcpft werden. \u00dcbung 3 (1h) Im n\u00e4chsten Schritt soll die ActionBar der ManageTaskActivity noch entsprechend angepasst werden: Im Manifest soll f\u00fcr die Activity als parentActivityName die MainActivity eingetragen werden. Dies erzeugt den Zur\u00fcckbutton in der ActionBar . Rechts in der ActionBar soll ein Button zum Speichern erzeugt werden. Hierf\u00fcr soll wiederum ein passendes SVG Icon ausgew\u00e4hlt werden und als Vector Asset importiert werden. Um den Button zu erzeugen, muss eine Men\u00fc-Ressource erstellt werden. Dies wird mit Rechtsklick auf den res Ordner und der Auswahl New Resource File erstellt. Als Resource Type soll Menu ausgew\u00e4hlt werden. Im <menu> XML-Element muss ein entsprechendes <item> hinzugef\u00fcgt werden (Icon muss ausgew\u00e4hlt werden und showAsAction soll auf always gesetzt werden). Die Vorschaut kann in Android Studio genutzt werden, \u00e4hnlich wie bei der Erstellung von Layouts. In der ManageTaskActivity muss nun die Methode onCreateOptionsMenu \u00fcberschrieben werden und das Men\u00fc \"Inflated\" werden. \u00dcber die Methode getMenuInflator kann eine Instanz der Klasse MenuInflator abgefragt werden, dieser besitzt die Methode inflate , welche genutzt werden soll. \u00dcbung 4 (2h) Mit Klick auf den Button zum Speichern in der ManageTaskActivity soll ein neues Task Objekt erzeugt werden und dieses \u00fcber das entsprechende DAO gespeichert werden. Der Klick auf den Button in der ActionBar kann \u00fcber die Implementierung der Methode onOptionsItemSelected abgefangen werden. Nach dem Speichern soll die MainActivity gestartet werden und der neue Task sollte dort sichtbar sein. \u00dcbung 5 (2h) Innerhalb der MainActivity soll es m\u00f6glich sein, dass auf einen Listeneintrag geklickt wird. Ein Klick soll dabei die ManageTaskActivity \u00f6ffnen und den Listeneintrag zum editieren anzeigen. Damit die ManageTaskActivity entscheiden kann, ob sie im Create oder Update Modus ist soll die id des Tasks innerhalb des Intents mitgegeben werden. Im Update Modus sollen die Formularfelder die Inhalte des Tasks laden und zum editieren bereitstellen. Bei Klick auf Speichern soll der Task in der Datenbank \u00fcberschrieben ( Update ) werden. \u00dcbung 6 (3h) Mit einer Swipe Geste nach Links sollen Eintr\u00e4ge aus der Liste in der MainActivity entfernt werden k\u00f6nnen. Dazu kann die Klasse ItemTouchHelper verwendet werden. Mit einem Callback (hier SimpleCallback ) kann das bewegen eines Listen Eintrags bewerkstelligt werden. ItemTouchHelper touchHelper = new ItemTouchHelper ( new ItemTouchHelper . SimpleCallback ( ItemTouchHelper . LEFT , ItemTouchHelper . LEFT ) { @Override public boolean onMove ( @NonNull RecyclerView recyclerView , @NonNull RecyclerView . ViewHolder viewHolder , @NonNull RecyclerView . ViewHolder target ) { return false ; } @Override public void onSwiped ( @NonNull RecyclerView . ViewHolder viewHolder , int direction ) { // Position in der Datenquelle abfragen int position = viewHolder . getAdapterPosition (); // l\u00f6schen durchf\u00fchren, dazu muss im Adapter eine L\u00f6schen Operation implementiert werden // Nachdem L\u00f6schen in der Datenbank m\u00fcssen die Daten im Adapter neu geladen werden // ansonsten laden sich die Eintr\u00e4ge in der RecyclerView nicht neu, nachdem Neuladen // muss im Adapter die Methode notifyDataSetChanged(); aufgerufen werden } }); // Instanz der RecyclerView \u00fcbergeben touchHelper . attachToRecyclerView (...); Mittels einer Snackbar soll am unteren Bildschirmrand angezeigt werden, dass der Eintrag entfernt wurde.","title":"\u00dcbungsblatt 3"},{"location":"%C3%BCbungen/_03/#ubungsblatt-3","text":"","title":"\u00dcbungsblatt 3"},{"location":"%C3%BCbungen/_03/#ubung-0","text":"In der \u00dcbung 0 soll gemeinsam die Grundlage f\u00fcr die App Task Master entwickelt werden. Es sollen \u00fcber das Room Framework eigene Tasks verwaltet werden k\u00f6nnen. Ein Task soll dabei folgenden Aufbau haben: @Entity class Task { @PrimaryKey ( autoGenerate = true ) public int id ; public String title ; public int priority ; public Date dueDate ; }","title":"\u00dcbung 0"},{"location":"%C3%BCbungen/_03/#ubung-1-1h","text":"Es sollen einige kosmetische \u00c4nderungen vorgenommen werden: Zwischen den einzelnen Listenelementen sollen Trennlinien erstellt werden. Dazu k\u00f6nnen sog. Dekoratoren ( ItemDecoration ) f\u00fcr die RecyclerView verwendet werden. \u00dcber die Methode addItemDecoration kann eine Instanz der Klasse DividerItemDecoration \u00fcbergeben werden. Es soll ein FloatingActionButton am rechten unteren Rand hinzugef\u00fcgt werden. Bei Klick auf diesen Button soll eine neue Activity ( ManageTaskActivity ) ge\u00f6ffnet werden. Der FloatingActionButton soll mit einem Icon ausgestattet werden. Suchen Sie dazu ein passendes SVG Icon im Internet (zB Ionicons , FontAwesome , Feather Icons ). Im Android Studio kann das SVG-Icon \u00fcber File > New > Vector Asset als Drawable im Projekt hinzugef\u00fcgt werden.","title":"\u00dcbung 1 (1h)"},{"location":"%C3%BCbungen/_03/#ubung-2-1h","text":"Das Erscheinungsbild der Activity ManageTaskActivity soll entsprechend gestaltet werden. Im ersten Schritt sollen die Formularfelder erstellt werden. Jedes Formularfeld hat links oben eine TextView als Label positioniert. Folgende Formularfelder kommen zum Einsatz: F\u00fcr den Titel des Tasks soll ein EditText zum Einsatz kommen. F\u00fcr die Auswahl des Datums soll ein DatePicker verwendet werden. Dabei sollen die Attribute datePickerMode als spinner und calendarViewShown als false gesetzt werden. F\u00fcr die Auswahl der Priorit\u00e4t soll ein Spinner im spinnerMode dialog verwendet werden. Die Eintr\u00e4ge im Spinner k\u00f6nnen \u00fcber das Attribut entries gesetzt werden. Dazu muss ein string-array als Resource Type Values angelegt werden und mit dem Spinner verkn\u00fcpft werden.","title":"\u00dcbung 2 (1h)"},{"location":"%C3%BCbungen/_03/#ubung-3-1h","text":"Im n\u00e4chsten Schritt soll die ActionBar der ManageTaskActivity noch entsprechend angepasst werden: Im Manifest soll f\u00fcr die Activity als parentActivityName die MainActivity eingetragen werden. Dies erzeugt den Zur\u00fcckbutton in der ActionBar . Rechts in der ActionBar soll ein Button zum Speichern erzeugt werden. Hierf\u00fcr soll wiederum ein passendes SVG Icon ausgew\u00e4hlt werden und als Vector Asset importiert werden. Um den Button zu erzeugen, muss eine Men\u00fc-Ressource erstellt werden. Dies wird mit Rechtsklick auf den res Ordner und der Auswahl New Resource File erstellt. Als Resource Type soll Menu ausgew\u00e4hlt werden. Im <menu> XML-Element muss ein entsprechendes <item> hinzugef\u00fcgt werden (Icon muss ausgew\u00e4hlt werden und showAsAction soll auf always gesetzt werden). Die Vorschaut kann in Android Studio genutzt werden, \u00e4hnlich wie bei der Erstellung von Layouts. In der ManageTaskActivity muss nun die Methode onCreateOptionsMenu \u00fcberschrieben werden und das Men\u00fc \"Inflated\" werden. \u00dcber die Methode getMenuInflator kann eine Instanz der Klasse MenuInflator abgefragt werden, dieser besitzt die Methode inflate , welche genutzt werden soll.","title":"\u00dcbung 3 (1h)"},{"location":"%C3%BCbungen/_03/#ubung-4-2h","text":"Mit Klick auf den Button zum Speichern in der ManageTaskActivity soll ein neues Task Objekt erzeugt werden und dieses \u00fcber das entsprechende DAO gespeichert werden. Der Klick auf den Button in der ActionBar kann \u00fcber die Implementierung der Methode onOptionsItemSelected abgefangen werden. Nach dem Speichern soll die MainActivity gestartet werden und der neue Task sollte dort sichtbar sein.","title":"\u00dcbung 4 (2h)"},{"location":"%C3%BCbungen/_03/#ubung-5-2h","text":"Innerhalb der MainActivity soll es m\u00f6glich sein, dass auf einen Listeneintrag geklickt wird. Ein Klick soll dabei die ManageTaskActivity \u00f6ffnen und den Listeneintrag zum editieren anzeigen. Damit die ManageTaskActivity entscheiden kann, ob sie im Create oder Update Modus ist soll die id des Tasks innerhalb des Intents mitgegeben werden. Im Update Modus sollen die Formularfelder die Inhalte des Tasks laden und zum editieren bereitstellen. Bei Klick auf Speichern soll der Task in der Datenbank \u00fcberschrieben ( Update ) werden.","title":"\u00dcbung 5 (2h)"},{"location":"%C3%BCbungen/_03/#ubung-6-3h","text":"Mit einer Swipe Geste nach Links sollen Eintr\u00e4ge aus der Liste in der MainActivity entfernt werden k\u00f6nnen. Dazu kann die Klasse ItemTouchHelper verwendet werden. Mit einem Callback (hier SimpleCallback ) kann das bewegen eines Listen Eintrags bewerkstelligt werden. ItemTouchHelper touchHelper = new ItemTouchHelper ( new ItemTouchHelper . SimpleCallback ( ItemTouchHelper . LEFT , ItemTouchHelper . LEFT ) { @Override public boolean onMove ( @NonNull RecyclerView recyclerView , @NonNull RecyclerView . ViewHolder viewHolder , @NonNull RecyclerView . ViewHolder target ) { return false ; } @Override public void onSwiped ( @NonNull RecyclerView . ViewHolder viewHolder , int direction ) { // Position in der Datenquelle abfragen int position = viewHolder . getAdapterPosition (); // l\u00f6schen durchf\u00fchren, dazu muss im Adapter eine L\u00f6schen Operation implementiert werden // Nachdem L\u00f6schen in der Datenbank m\u00fcssen die Daten im Adapter neu geladen werden // ansonsten laden sich die Eintr\u00e4ge in der RecyclerView nicht neu, nachdem Neuladen // muss im Adapter die Methode notifyDataSetChanged(); aufgerufen werden } }); // Instanz der RecyclerView \u00fcbergeben touchHelper . attachToRecyclerView (...); Mittels einer Snackbar soll am unteren Bildschirmrand angezeigt werden, dass der Eintrag entfernt wurde.","title":"\u00dcbung 6 (3h)"},{"location":"%C3%BCbungen/_04/","text":"\u00dcbungsblatt 4 \u00dcbung 0 Es soll eine MainActivity und eine CameraActivity erstellt werden. \u00dcbung 1 (1,5h) In der MainActivity soll ein 3x3 Grid von ImageButtons erstellt werden. Das Bild, welches mit der CameraActivity erstellt wurde, soll in 9 quadratische Teile geschnitten werden und 8 dieser Ausschnitte sollen jeweils \u00fcber die Methode setImageBitmap an den ImageButtons gesetzt werden. Der 9. Button soll existieren, aber kein Bild enthalten. \u00dcbung 2 (4,5h) Die ImageButtons sollen beweglich sein. Zu einem Zeitpunkt sollen aber nur jene 2 oder 3 ImageButtons beweglich sein, welche neben der freien Fl\u00e4che liegen. Es soll sichergestellt sein, dass ImageButton nur an dem vorgesehenen Platz zum liegen kommen kann (Ber\u00fccksichtigung des Rasters). Sollte die Benutzerin die Bewegung fr\u00fchzeitig abbrechen ( ACTION_UP bevor der ImageButton am richtigen Ort liegt), soll der ImageButton durch eine kurze Animation zum richtigen Ablageort gelegt werden. \u00dcbung 3 (3h) Mit Klick auf den linken unteren Button in der MainActivity soll das Puzzle neu gemischt werden. Die ImageButtons sollen so gemischt werden, dass das Spiel zu einer L\u00f6sung f\u00fchren kann. \u00dcbung 4 (1,5h) Wird das Puzzle in den Enzustand gef\u00fchrt (alle Pl\u00e4ttchen befinden sich am richtigen Ort) soll der 9. ImageButton auch das Teilbild gesetzt bekommen. Das Bild soll solange bestehen bleiben, bis ein neues Foto mit der Kamera gemacht wird oder neu gemischt wird.","title":"\u00dcbungsblatt 4"},{"location":"%C3%BCbungen/_04/#ubungsblatt-4","text":"","title":"\u00dcbungsblatt 4"},{"location":"%C3%BCbungen/_04/#ubung-0","text":"Es soll eine MainActivity und eine CameraActivity erstellt werden.","title":"\u00dcbung 0"},{"location":"%C3%BCbungen/_04/#ubung-1-15h","text":"In der MainActivity soll ein 3x3 Grid von ImageButtons erstellt werden. Das Bild, welches mit der CameraActivity erstellt wurde, soll in 9 quadratische Teile geschnitten werden und 8 dieser Ausschnitte sollen jeweils \u00fcber die Methode setImageBitmap an den ImageButtons gesetzt werden. Der 9. Button soll existieren, aber kein Bild enthalten.","title":"\u00dcbung 1 (1,5h)"},{"location":"%C3%BCbungen/_04/#ubung-2-45h","text":"Die ImageButtons sollen beweglich sein. Zu einem Zeitpunkt sollen aber nur jene 2 oder 3 ImageButtons beweglich sein, welche neben der freien Fl\u00e4che liegen. Es soll sichergestellt sein, dass ImageButton nur an dem vorgesehenen Platz zum liegen kommen kann (Ber\u00fccksichtigung des Rasters). Sollte die Benutzerin die Bewegung fr\u00fchzeitig abbrechen ( ACTION_UP bevor der ImageButton am richtigen Ort liegt), soll der ImageButton durch eine kurze Animation zum richtigen Ablageort gelegt werden.","title":"\u00dcbung 2 (4,5h)"},{"location":"%C3%BCbungen/_04/#ubung-3-3h","text":"Mit Klick auf den linken unteren Button in der MainActivity soll das Puzzle neu gemischt werden. Die ImageButtons sollen so gemischt werden, dass das Spiel zu einer L\u00f6sung f\u00fchren kann.","title":"\u00dcbung 3 (3h)"},{"location":"%C3%BCbungen/_04/#ubung-4-15h","text":"Wird das Puzzle in den Enzustand gef\u00fchrt (alle Pl\u00e4ttchen befinden sich am richtigen Ort) soll der 9. ImageButton auch das Teilbild gesetzt bekommen. Das Bild soll solange bestehen bleiben, bis ein neues Foto mit der Kamera gemacht wird oder neu gemischt wird.","title":"\u00dcbung 4 (1,5h)"},{"location":"%C3%BCbungen/_05/","text":"\u00dcbungsblatt 5 Die App Geo Tracker soll eine Route, welche beispielsweise zu Fu\u00df begangen wird, tracken und entsprechend \u00fcber eine Karte anzeigen k\u00f6nnen. Tracken in diesem Zusammenhang bedeutet, dass die Geokoordinaten kontinuierlich abgefragt und gespeichert werden. Die Datenstrukturen in der Datenbank sollen folgend aussehen: class Track { public long id ; public String title ; public String description ; public Date start ; public Date end ; } class Location { public long id ; public double latitude ; public double longitude ; public double altidude ; public Date timestamp ; public long trackId ; } \u00dcbung 0 Innerhalb einer RecyclerView sollen aufgenommene Tracks angezeigt werden. Jeder Track soll dabei als CardView realisiert werden. Die CardView soll mittels des Material Designs realisiert werden ( Link ). Eine CardView soll folgendes enthalten: Titel Dauer des Tracks (zB 1h 14min) Beschreibung (falls vorhanden) Buttons: Edit, Map Es soll ebenfalls ein Floating Action Button angelegt werden, welcher bei Klick pr\u00fcfen soll, ob die Permission zum Tracking vorhanden sind und ob GPS aktiviert ist. \u00dcbung 1 (4h) Das Tracking soll innerhalb eines Foreground Service realisiert werden. Der Service soll dabei in der Methode onStartCommand auf 4 Intent Actions reagieren: TOGGLE : Dieser Intent soll grunds\u00e4tzlich nur von der MainActivity der App kommen. Da in der App der Status des Services nicht bekannt ist, sollen unterschiedliche passieren: Falls der Service aktuell kein Tracking durchf\u00fchrt, soll ein neuer Track erzeugt werden und das Tracking soll gestartet werden. Falls der Service aktuell ein Tracking durchf\u00fchrt, soll dieses pausiert werden. Falls der Service aktuell ein Tracking pausiert hat, soll dieses wieder gestartet werden. CONTINUE : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking weiterf\u00fchren. PAUSE : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking pausieren. STOP : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking stoppen. Innerhalb der \u00dcbung 1 soll sich dabei nur die Notification entsprechend ver\u00e4ndern. Das tats\u00e4chliche Tracking soll innerhalb von \u00dcbung 2 realisiert werden. \u00dcbung 2 (4h) Beim Start des Trackings soll einer neuer Track in der Datenbank angelegt werden der Titel soll dabei vorl\u00e4ufig mit Datum und Uhrzeit belegt werden, das Startdatum mit dem aktuellen Timestamp. Mit dem FusedLocationProvider sollen im Interval von 5 Sekunden und einer mindest \u00c4nderung von 5 Metern getrackt werden. Jedes Location Update soll als Location in die Datenbank gespeichert werden. Das Tracking soll entsprechend gesteuert werden \u00fcber die Intentverarbeitung aus \u00dcbung 1. \u00dcbung 3 (1h) Mit Klick auf den Edit Button auf der Card in der RecyclerView soll ein Formular ge\u00f6ffnet werden. Im Formular soll der Titel und die Beschreibung des Tracks editiert werden k\u00f6nnen. Beim Laden des Formulars sollen die bestehenden Inhalte in das Formular geladen werden. \u00dcbung 4 (3h) Es soll eine Karteansicht der getrackten Route dargestellt werden. Dazu soll im ersten Schritt die osmdroid MapView innerhalb einer neuen Activity (MapActivity) angezeigt werden. Dabei soll das Mapnik Kartenmaterial verwendet werden. Bei Klick auf \u201eTrack anzeigen\u201c wird diese MapActivity ge\u00f6ffnet (Aktuelle Version osmdroid: 6.1.8). Innerhalb der Karte soll die getrackte Route dargestellt werden. Dazu kann eine sog. Polyline verwendet werden, welche die Punkte geordnet nach Datum als Liste bereitstellt. Link: http://osmdroid.github.io/osmdroid/Markers,-Lines-and-Polygons.html Die Location Objekte sollen \u00fcber den Dao abgefragt werden. Die Query soll dabei die Track ID verwenden. Die Locations m\u00fcssen dabei nach Timestamp sortiert werden.","title":"\u00dcbungsblatt 5"},{"location":"%C3%BCbungen/_05/#ubungsblatt-5","text":"Die App Geo Tracker soll eine Route, welche beispielsweise zu Fu\u00df begangen wird, tracken und entsprechend \u00fcber eine Karte anzeigen k\u00f6nnen. Tracken in diesem Zusammenhang bedeutet, dass die Geokoordinaten kontinuierlich abgefragt und gespeichert werden. Die Datenstrukturen in der Datenbank sollen folgend aussehen: class Track { public long id ; public String title ; public String description ; public Date start ; public Date end ; } class Location { public long id ; public double latitude ; public double longitude ; public double altidude ; public Date timestamp ; public long trackId ; }","title":"\u00dcbungsblatt 5"},{"location":"%C3%BCbungen/_05/#ubung-0","text":"Innerhalb einer RecyclerView sollen aufgenommene Tracks angezeigt werden. Jeder Track soll dabei als CardView realisiert werden. Die CardView soll mittels des Material Designs realisiert werden ( Link ). Eine CardView soll folgendes enthalten: Titel Dauer des Tracks (zB 1h 14min) Beschreibung (falls vorhanden) Buttons: Edit, Map Es soll ebenfalls ein Floating Action Button angelegt werden, welcher bei Klick pr\u00fcfen soll, ob die Permission zum Tracking vorhanden sind und ob GPS aktiviert ist.","title":"\u00dcbung 0"},{"location":"%C3%BCbungen/_05/#ubung-1-4h","text":"Das Tracking soll innerhalb eines Foreground Service realisiert werden. Der Service soll dabei in der Methode onStartCommand auf 4 Intent Actions reagieren: TOGGLE : Dieser Intent soll grunds\u00e4tzlich nur von der MainActivity der App kommen. Da in der App der Status des Services nicht bekannt ist, sollen unterschiedliche passieren: Falls der Service aktuell kein Tracking durchf\u00fchrt, soll ein neuer Track erzeugt werden und das Tracking soll gestartet werden. Falls der Service aktuell ein Tracking durchf\u00fchrt, soll dieses pausiert werden. Falls der Service aktuell ein Tracking pausiert hat, soll dieses wieder gestartet werden. CONTINUE : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking weiterf\u00fchren. PAUSE : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking pausieren. STOP : Dieser Intent soll grunds\u00e4tzlich nur von der Notification kommen und das Tracking stoppen. Innerhalb der \u00dcbung 1 soll sich dabei nur die Notification entsprechend ver\u00e4ndern. Das tats\u00e4chliche Tracking soll innerhalb von \u00dcbung 2 realisiert werden.","title":"\u00dcbung 1 (4h)"},{"location":"%C3%BCbungen/_05/#ubung-2-4h","text":"Beim Start des Trackings soll einer neuer Track in der Datenbank angelegt werden der Titel soll dabei vorl\u00e4ufig mit Datum und Uhrzeit belegt werden, das Startdatum mit dem aktuellen Timestamp. Mit dem FusedLocationProvider sollen im Interval von 5 Sekunden und einer mindest \u00c4nderung von 5 Metern getrackt werden. Jedes Location Update soll als Location in die Datenbank gespeichert werden. Das Tracking soll entsprechend gesteuert werden \u00fcber die Intentverarbeitung aus \u00dcbung 1.","title":"\u00dcbung 2 (4h)"},{"location":"%C3%BCbungen/_05/#ubung-3-1h","text":"Mit Klick auf den Edit Button auf der Card in der RecyclerView soll ein Formular ge\u00f6ffnet werden. Im Formular soll der Titel und die Beschreibung des Tracks editiert werden k\u00f6nnen. Beim Laden des Formulars sollen die bestehenden Inhalte in das Formular geladen werden.","title":"\u00dcbung 3 (1h)"},{"location":"%C3%BCbungen/_05/#ubung-4-3h","text":"Es soll eine Karteansicht der getrackten Route dargestellt werden. Dazu soll im ersten Schritt die osmdroid MapView innerhalb einer neuen Activity (MapActivity) angezeigt werden. Dabei soll das Mapnik Kartenmaterial verwendet werden. Bei Klick auf \u201eTrack anzeigen\u201c wird diese MapActivity ge\u00f6ffnet (Aktuelle Version osmdroid: 6.1.8). Innerhalb der Karte soll die getrackte Route dargestellt werden. Dazu kann eine sog. Polyline verwendet werden, welche die Punkte geordnet nach Datum als Liste bereitstellt. Link: http://osmdroid.github.io/osmdroid/Markers,-Lines-and-Polygons.html Die Location Objekte sollen \u00fcber den Dao abgefragt werden. Die Query soll dabei die Track ID verwenden. Die Locations m\u00fcssen dabei nach Timestamp sortiert werden.","title":"\u00dcbung 4 (3h)"},{"location":"%C3%BCbungen/_06/","text":"\u00dcbungsblatt 6 \u00dcbung 0 Voraussetzungen Damit WebXR Projekte lokal entwickelt werden k\u00f6nnen, muss nodejs installiert werden. Das Command node und npm m\u00fcssen \u00fcber die Kommandozeile ausf\u00fchrbar sein. Innerhalb einer Powershell oder Bash sollten die folgenden Commands ein \u00e4hnliches Bild liefern: Docs Ordner Das gesamte Projekt soll im Ordner docs entwickelt werden. Dieser Ordner kann dann \u00fcber Github.io \u00f6ffentlich geteilt werden. Im Ordner docs soll die Datei index.html erstellt werden. Der Inhalt dieser Datei soll folgenderma\u00dfen aussehen: < html > < head > < script src = \"https://aframe.io/releases/1.1.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 1 -5\" > </ a-box > </ a-scene > </ body > </ html > Package Management Im Projektordner soll eine Datei package.json erstellt werden folgendem Inhalt: { \"scripts\" : { \"start\" : \"live-server docs\" } } Nachdem soll mit npm i live-server --save-dev die Bibliothek live-server installiert werden. Durch die Ausf\u00fchrung npm start im Projektordner wird ein Web-Server gestartet, der bei Datei\u00e4nderungen das Projekt im Web-Browser neu l\u00e4dt. \u00dcbung 1 (9h) Es soll eine beliebige und individuelle 3D-Welt mit A-Frame erstellt werden. Diese 3D-Welt soll zumindest folgende Elemente enthalten: Zumindest eine a-plane als Boden und ein a-sky als Himmel Zumindest eine Animation Zumindest eine Gaze-based Interaction mit einem Element in der 3D-Welt Zumindest ein Element mit einer Textur Zumindest ein importiertes gltf-Modell Zumindest ein Lichteffekt Zumindest ein Audioeffekt Beispiele f\u00fcr 3D-Welten: Haus mit T\u00fcren, Fenster und Garten Hochhaus mit steuerbarem Aufzug Einfache Zugstrecke mit Zug in den man einsteigen kann Einfaches Labyrinth mit einfachem Schalter \u00dcbung 2 (1h) Der Projektordner soll als Git-Repository initialisiert werden ( git init ). Auf Github soll ein neues Projekt erstellt werden. Mit dem Command git remote add ... soll das remote Github Projekt mit dem lokalen Git-Repository verkn\u00fcpft werden. Auf Github soll f\u00fcr das Projekt Github Pages eingerichtet werden in den Settings (siehe Github Pages ). Mit git push werden die Inhalte aus dem docs Ordner auf der Domain username.github.io/projectname ver\u00f6ffentlicht werden. Hinweis Es soll eine sinnvolle .gitingore Datei erstellt werden um node_modules zu ignorieren.","title":"\u00dcbungsblatt 6"},{"location":"%C3%BCbungen/_06/#ubungsblatt-6","text":"","title":"\u00dcbungsblatt 6"},{"location":"%C3%BCbungen/_06/#ubung-0","text":"","title":"\u00dcbung 0"},{"location":"%C3%BCbungen/_06/#voraussetzungen","text":"Damit WebXR Projekte lokal entwickelt werden k\u00f6nnen, muss nodejs installiert werden. Das Command node und npm m\u00fcssen \u00fcber die Kommandozeile ausf\u00fchrbar sein. Innerhalb einer Powershell oder Bash sollten die folgenden Commands ein \u00e4hnliches Bild liefern:","title":"Voraussetzungen"},{"location":"%C3%BCbungen/_06/#docs-ordner","text":"Das gesamte Projekt soll im Ordner docs entwickelt werden. Dieser Ordner kann dann \u00fcber Github.io \u00f6ffentlich geteilt werden. Im Ordner docs soll die Datei index.html erstellt werden. Der Inhalt dieser Datei soll folgenderma\u00dfen aussehen: < html > < head > < script src = \"https://aframe.io/releases/1.1.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 1 -5\" > </ a-box > </ a-scene > </ body > </ html >","title":"Docs Ordner"},{"location":"%C3%BCbungen/_06/#package-management","text":"Im Projektordner soll eine Datei package.json erstellt werden folgendem Inhalt: { \"scripts\" : { \"start\" : \"live-server docs\" } } Nachdem soll mit npm i live-server --save-dev die Bibliothek live-server installiert werden. Durch die Ausf\u00fchrung npm start im Projektordner wird ein Web-Server gestartet, der bei Datei\u00e4nderungen das Projekt im Web-Browser neu l\u00e4dt.","title":"Package Management"},{"location":"%C3%BCbungen/_06/#ubung-1-9h","text":"Es soll eine beliebige und individuelle 3D-Welt mit A-Frame erstellt werden. Diese 3D-Welt soll zumindest folgende Elemente enthalten: Zumindest eine a-plane als Boden und ein a-sky als Himmel Zumindest eine Animation Zumindest eine Gaze-based Interaction mit einem Element in der 3D-Welt Zumindest ein Element mit einer Textur Zumindest ein importiertes gltf-Modell Zumindest ein Lichteffekt Zumindest ein Audioeffekt Beispiele f\u00fcr 3D-Welten: Haus mit T\u00fcren, Fenster und Garten Hochhaus mit steuerbarem Aufzug Einfache Zugstrecke mit Zug in den man einsteigen kann Einfaches Labyrinth mit einfachem Schalter","title":"\u00dcbung 1 (9h)"},{"location":"%C3%BCbungen/_06/#ubung-2-1h","text":"Der Projektordner soll als Git-Repository initialisiert werden ( git init ). Auf Github soll ein neues Projekt erstellt werden. Mit dem Command git remote add ... soll das remote Github Projekt mit dem lokalen Git-Repository verkn\u00fcpft werden. Auf Github soll f\u00fcr das Projekt Github Pages eingerichtet werden in den Settings (siehe Github Pages ). Mit git push werden die Inhalte aus dem docs Ordner auf der Domain username.github.io/projectname ver\u00f6ffentlicht werden. Hinweis Es soll eine sinnvolle .gitingore Datei erstellt werden um node_modules zu ignorieren.","title":"\u00dcbung 2 (1h)"}]}